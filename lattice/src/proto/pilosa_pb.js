/* eslint-disable */
// source: pilosa.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pilosa.ColumnInfo', null, global);
goog.exportSymbol('proto.pilosa.ColumnResponse', null, global);
goog.exportSymbol('proto.pilosa.ColumnResponse.ColumnvalCase', null, global);
goog.exportSymbol('proto.pilosa.CreateIndexRequest', null, global);
goog.exportSymbol('proto.pilosa.CreateIndexResponse', null, global);
goog.exportSymbol('proto.pilosa.Decimal', null, global);
goog.exportSymbol('proto.pilosa.DeleteIndexRequest', null, global);
goog.exportSymbol('proto.pilosa.DeleteIndexResponse', null, global);
goog.exportSymbol('proto.pilosa.GetIndexRequest', null, global);
goog.exportSymbol('proto.pilosa.GetIndexResponse', null, global);
goog.exportSymbol('proto.pilosa.GetIndexesRequest', null, global);
goog.exportSymbol('proto.pilosa.GetIndexesResponse', null, global);
goog.exportSymbol('proto.pilosa.IdsOrKeys', null, global);
goog.exportSymbol('proto.pilosa.IdsOrKeys.TypeCase', null, global);
goog.exportSymbol('proto.pilosa.Index', null, global);
goog.exportSymbol('proto.pilosa.InspectRequest', null, global);
goog.exportSymbol('proto.pilosa.QueryPQLRequest', null, global);
goog.exportSymbol('proto.pilosa.QuerySQLRequest', null, global);
goog.exportSymbol('proto.pilosa.Row', null, global);
goog.exportSymbol('proto.pilosa.RowResponse', null, global);
goog.exportSymbol('proto.pilosa.StatusError', null, global);
goog.exportSymbol('proto.pilosa.StringArray', null, global);
goog.exportSymbol('proto.pilosa.TableResponse', null, global);
goog.exportSymbol('proto.pilosa.Uint64Array', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.QueryPQLRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.QueryPQLRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.QueryPQLRequest.displayName = 'proto.pilosa.QueryPQLRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.QuerySQLRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.QuerySQLRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.QuerySQLRequest.displayName = 'proto.pilosa.QuerySQLRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.StatusError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.StatusError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.StatusError.displayName = 'proto.pilosa.StatusError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.RowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.RowResponse.repeatedFields_, null);
};
goog.inherits(proto.pilosa.RowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.RowResponse.displayName = 'proto.pilosa.RowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.Row.repeatedFields_, null);
};
goog.inherits(proto.pilosa.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.Row.displayName = 'proto.pilosa.Row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.TableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.TableResponse.repeatedFields_, null);
};
goog.inherits(proto.pilosa.TableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.TableResponse.displayName = 'proto.pilosa.TableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.ColumnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.ColumnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.ColumnInfo.displayName = 'proto.pilosa.ColumnInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.ColumnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pilosa.ColumnResponse.oneofGroups_);
};
goog.inherits(proto.pilosa.ColumnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.ColumnResponse.displayName = 'proto.pilosa.ColumnResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.Decimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.Decimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.Decimal.displayName = 'proto.pilosa.Decimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.InspectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.InspectRequest.repeatedFields_, null);
};
goog.inherits(proto.pilosa.InspectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.InspectRequest.displayName = 'proto.pilosa.InspectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.Uint64Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.Uint64Array.repeatedFields_, null);
};
goog.inherits(proto.pilosa.Uint64Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.Uint64Array.displayName = 'proto.pilosa.Uint64Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.StringArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.StringArray.repeatedFields_, null);
};
goog.inherits(proto.pilosa.StringArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.StringArray.displayName = 'proto.pilosa.StringArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.IdsOrKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pilosa.IdsOrKeys.oneofGroups_);
};
goog.inherits(proto.pilosa.IdsOrKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.IdsOrKeys.displayName = 'proto.pilosa.IdsOrKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.Index.displayName = 'proto.pilosa.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.CreateIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.CreateIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.CreateIndexRequest.displayName = 'proto.pilosa.CreateIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.CreateIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.CreateIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.CreateIndexResponse.displayName = 'proto.pilosa.CreateIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.GetIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.GetIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.GetIndexRequest.displayName = 'proto.pilosa.GetIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.GetIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.GetIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.GetIndexResponse.displayName = 'proto.pilosa.GetIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.GetIndexesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.GetIndexesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.GetIndexesRequest.displayName = 'proto.pilosa.GetIndexesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.GetIndexesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pilosa.GetIndexesResponse.repeatedFields_, null);
};
goog.inherits(proto.pilosa.GetIndexesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.GetIndexesResponse.displayName = 'proto.pilosa.GetIndexesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.DeleteIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.DeleteIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.DeleteIndexRequest.displayName = 'proto.pilosa.DeleteIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pilosa.DeleteIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pilosa.DeleteIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pilosa.DeleteIndexResponse.displayName = 'proto.pilosa.DeleteIndexResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.QueryPQLRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.QueryPQLRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.QueryPQLRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.QueryPQLRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pql: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.QueryPQLRequest}
 */
proto.pilosa.QueryPQLRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.QueryPQLRequest;
  return proto.pilosa.QueryPQLRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.QueryPQLRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.QueryPQLRequest}
 */
proto.pilosa.QueryPQLRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.QueryPQLRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.QueryPQLRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.QueryPQLRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.QueryPQLRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPql();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.pilosa.QueryPQLRequest.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.QueryPQLRequest} returns this
 */
proto.pilosa.QueryPQLRequest.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pql = 2;
 * @return {string}
 */
proto.pilosa.QueryPQLRequest.prototype.getPql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.QueryPQLRequest} returns this
 */
proto.pilosa.QueryPQLRequest.prototype.setPql = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.QuerySQLRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.QuerySQLRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.QuerySQLRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.QuerySQLRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sql: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.QuerySQLRequest}
 */
proto.pilosa.QuerySQLRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.QuerySQLRequest;
  return proto.pilosa.QuerySQLRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.QuerySQLRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.QuerySQLRequest}
 */
proto.pilosa.QuerySQLRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.QuerySQLRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.QuerySQLRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.QuerySQLRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.QuerySQLRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSql();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sql = 1;
 * @return {string}
 */
proto.pilosa.QuerySQLRequest.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.QuerySQLRequest} returns this
 */
proto.pilosa.QuerySQLRequest.prototype.setSql = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.StatusError.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.StatusError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.StatusError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.StatusError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.StatusError}
 */
proto.pilosa.StatusError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.StatusError;
  return proto.pilosa.StatusError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.StatusError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.StatusError}
 */
proto.pilosa.StatusError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.StatusError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.StatusError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.StatusError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.StatusError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Code = 1;
 * @return {number}
 */
proto.pilosa.StatusError.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.StatusError} returns this
 */
proto.pilosa.StatusError.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.pilosa.StatusError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.StatusError} returns this
 */
proto.pilosa.StatusError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.RowResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.RowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.RowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.RowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.RowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.pilosa.ColumnInfo.toObject, includeInstance),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.pilosa.ColumnResponse.toObject, includeInstance),
    statuserror: (f = msg.getStatuserror()) && proto.pilosa.StatusError.toObject(includeInstance, f),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.RowResponse}
 */
proto.pilosa.RowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.RowResponse;
  return proto.pilosa.RowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.RowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.RowResponse}
 */
proto.pilosa.RowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.ColumnInfo;
      reader.readMessage(value,proto.pilosa.ColumnInfo.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.pilosa.ColumnResponse;
      reader.readMessage(value,proto.pilosa.ColumnResponse.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 3:
      var value = new proto.pilosa.StatusError;
      reader.readMessage(value,proto.pilosa.StatusError.deserializeBinaryFromReader);
      msg.setStatuserror(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.RowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.RowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.RowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.RowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pilosa.ColumnInfo.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pilosa.ColumnResponse.serializeBinaryToWriter
    );
  }
  f = message.getStatuserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pilosa.StatusError.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated ColumnInfo headers = 1;
 * @return {!Array<!proto.pilosa.ColumnInfo>}
 */
proto.pilosa.RowResponse.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.pilosa.ColumnInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.ColumnInfo, 1));
};


/**
 * @param {!Array<!proto.pilosa.ColumnInfo>} value
 * @return {!proto.pilosa.RowResponse} returns this
*/
proto.pilosa.RowResponse.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pilosa.ColumnInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.ColumnInfo}
 */
proto.pilosa.RowResponse.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pilosa.ColumnInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.RowResponse} returns this
 */
proto.pilosa.RowResponse.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated ColumnResponse columns = 2;
 * @return {!Array<!proto.pilosa.ColumnResponse>}
 */
proto.pilosa.RowResponse.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.pilosa.ColumnResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.ColumnResponse, 2));
};


/**
 * @param {!Array<!proto.pilosa.ColumnResponse>} value
 * @return {!proto.pilosa.RowResponse} returns this
*/
proto.pilosa.RowResponse.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pilosa.ColumnResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.ColumnResponse}
 */
proto.pilosa.RowResponse.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pilosa.ColumnResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.RowResponse} returns this
 */
proto.pilosa.RowResponse.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional StatusError StatusError = 3;
 * @return {?proto.pilosa.StatusError}
 */
proto.pilosa.RowResponse.prototype.getStatuserror = function() {
  return /** @type{?proto.pilosa.StatusError} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.StatusError, 3));
};


/**
 * @param {?proto.pilosa.StatusError|undefined} value
 * @return {!proto.pilosa.RowResponse} returns this
*/
proto.pilosa.RowResponse.prototype.setStatuserror = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.RowResponse} returns this
 */
proto.pilosa.RowResponse.prototype.clearStatuserror = function() {
  return this.setStatuserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.RowResponse.prototype.hasStatuserror = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 duration = 4;
 * @return {number}
 */
proto.pilosa.RowResponse.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.RowResponse} returns this
 */
proto.pilosa.RowResponse.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.Row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.pilosa.ColumnResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.Row}
 */
proto.pilosa.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.Row;
  return proto.pilosa.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.Row}
 */
proto.pilosa.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.ColumnResponse;
      reader.readMessage(value,proto.pilosa.ColumnResponse.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pilosa.ColumnResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ColumnResponse columns = 1;
 * @return {!Array<!proto.pilosa.ColumnResponse>}
 */
proto.pilosa.Row.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.pilosa.ColumnResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.ColumnResponse, 1));
};


/**
 * @param {!Array<!proto.pilosa.ColumnResponse>} value
 * @return {!proto.pilosa.Row} returns this
*/
proto.pilosa.Row.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pilosa.ColumnResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.ColumnResponse}
 */
proto.pilosa.Row.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pilosa.ColumnResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.Row} returns this
 */
proto.pilosa.Row.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.TableResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.TableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.TableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.TableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.TableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.pilosa.ColumnInfo.toObject, includeInstance),
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.pilosa.Row.toObject, includeInstance),
    statuserror: (f = msg.getStatuserror()) && proto.pilosa.StatusError.toObject(includeInstance, f),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.TableResponse}
 */
proto.pilosa.TableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.TableResponse;
  return proto.pilosa.TableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.TableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.TableResponse}
 */
proto.pilosa.TableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.ColumnInfo;
      reader.readMessage(value,proto.pilosa.ColumnInfo.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.pilosa.Row;
      reader.readMessage(value,proto.pilosa.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 3:
      var value = new proto.pilosa.StatusError;
      reader.readMessage(value,proto.pilosa.StatusError.deserializeBinaryFromReader);
      msg.setStatuserror(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.TableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.TableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.TableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.TableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pilosa.ColumnInfo.serializeBinaryToWriter
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pilosa.Row.serializeBinaryToWriter
    );
  }
  f = message.getStatuserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pilosa.StatusError.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated ColumnInfo headers = 1;
 * @return {!Array<!proto.pilosa.ColumnInfo>}
 */
proto.pilosa.TableResponse.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.pilosa.ColumnInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.ColumnInfo, 1));
};


/**
 * @param {!Array<!proto.pilosa.ColumnInfo>} value
 * @return {!proto.pilosa.TableResponse} returns this
*/
proto.pilosa.TableResponse.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pilosa.ColumnInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.ColumnInfo}
 */
proto.pilosa.TableResponse.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pilosa.ColumnInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.TableResponse} returns this
 */
proto.pilosa.TableResponse.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated Row rows = 2;
 * @return {!Array<!proto.pilosa.Row>}
 */
proto.pilosa.TableResponse.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.pilosa.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.Row, 2));
};


/**
 * @param {!Array<!proto.pilosa.Row>} value
 * @return {!proto.pilosa.TableResponse} returns this
*/
proto.pilosa.TableResponse.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pilosa.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.Row}
 */
proto.pilosa.TableResponse.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pilosa.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.TableResponse} returns this
 */
proto.pilosa.TableResponse.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * optional StatusError StatusError = 3;
 * @return {?proto.pilosa.StatusError}
 */
proto.pilosa.TableResponse.prototype.getStatuserror = function() {
  return /** @type{?proto.pilosa.StatusError} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.StatusError, 3));
};


/**
 * @param {?proto.pilosa.StatusError|undefined} value
 * @return {!proto.pilosa.TableResponse} returns this
*/
proto.pilosa.TableResponse.prototype.setStatuserror = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.TableResponse} returns this
 */
proto.pilosa.TableResponse.prototype.clearStatuserror = function() {
  return this.setStatuserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.TableResponse.prototype.hasStatuserror = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 duration = 4;
 * @return {number}
 */
proto.pilosa.TableResponse.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.TableResponse} returns this
 */
proto.pilosa.TableResponse.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.ColumnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.ColumnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.ColumnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.ColumnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datatype: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.ColumnInfo}
 */
proto.pilosa.ColumnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.ColumnInfo;
  return proto.pilosa.ColumnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.ColumnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.ColumnInfo}
 */
proto.pilosa.ColumnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatatype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.ColumnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.ColumnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.ColumnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.ColumnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatatype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pilosa.ColumnInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.ColumnInfo} returns this
 */
proto.pilosa.ColumnInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string datatype = 2;
 * @return {string}
 */
proto.pilosa.ColumnInfo.prototype.getDatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.ColumnInfo} returns this
 */
proto.pilosa.ColumnInfo.prototype.setDatatype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pilosa.ColumnResponse.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.pilosa.ColumnResponse.ColumnvalCase = {
  COLUMNVAL_NOT_SET: 0,
  STRINGVAL: 1,
  UINT64VAL: 2,
  INT64VAL: 3,
  BOOLVAL: 4,
  BLOBVAL: 5,
  UINT64ARRAYVAL: 6,
  STRINGARRAYVAL: 7,
  FLOAT64VAL: 8,
  DECIMALVAL: 9,
  TIMESTAMPVAL: 10
};

/**
 * @return {proto.pilosa.ColumnResponse.ColumnvalCase}
 */
proto.pilosa.ColumnResponse.prototype.getColumnvalCase = function() {
  return /** @type {proto.pilosa.ColumnResponse.ColumnvalCase} */(jspb.Message.computeOneofCase(this, proto.pilosa.ColumnResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.ColumnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.ColumnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.ColumnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.ColumnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringval: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uint64val: jspb.Message.getFieldWithDefault(msg, 2, 0),
    int64val: jspb.Message.getFieldWithDefault(msg, 3, 0),
    boolval: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    blobval: msg.getBlobval_asB64(),
    uint64arrayval: (f = msg.getUint64arrayval()) && proto.pilosa.Uint64Array.toObject(includeInstance, f),
    stringarrayval: (f = msg.getStringarrayval()) && proto.pilosa.StringArray.toObject(includeInstance, f),
    float64val: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    decimalval: (f = msg.getDecimalval()) && proto.pilosa.Decimal.toObject(includeInstance, f),
    timestampval: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.ColumnResponse}
 */
proto.pilosa.ColumnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.ColumnResponse;
  return proto.pilosa.ColumnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.ColumnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.ColumnResponse}
 */
proto.pilosa.ColumnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64val(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64val(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolval(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlobval(value);
      break;
    case 6:
      var value = new proto.pilosa.Uint64Array;
      reader.readMessage(value,proto.pilosa.Uint64Array.deserializeBinaryFromReader);
      msg.setUint64arrayval(value);
      break;
    case 7:
      var value = new proto.pilosa.StringArray;
      reader.readMessage(value,proto.pilosa.StringArray.deserializeBinaryFromReader);
      msg.setStringarrayval(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloat64val(value);
      break;
    case 9:
      var value = new proto.pilosa.Decimal;
      reader.readMessage(value,proto.pilosa.Decimal.deserializeBinaryFromReader);
      msg.setDecimalval(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestampval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.ColumnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.ColumnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.ColumnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.ColumnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getUint64arrayval();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pilosa.Uint64Array.serializeBinaryToWriter
    );
  }
  f = message.getStringarrayval();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pilosa.StringArray.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDecimalval();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.pilosa.Decimal.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string stringVal = 1;
 * @return {string}
 */
proto.pilosa.ColumnResponse.prototype.getStringval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setStringval = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearStringval = function() {
  return jspb.Message.setOneofField(this, 1, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasStringval = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 uint64Val = 2;
 * @return {number}
 */
proto.pilosa.ColumnResponse.prototype.getUint64val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setUint64val = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearUint64val = function() {
  return jspb.Message.setOneofField(this, 2, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasUint64val = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int64Val = 3;
 * @return {number}
 */
proto.pilosa.ColumnResponse.prototype.getInt64val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setInt64val = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearInt64val = function() {
  return jspb.Message.setOneofField(this, 3, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasInt64val = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool boolVal = 4;
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.getBoolval = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setBoolval = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearBoolval = function() {
  return jspb.Message.setOneofField(this, 4, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasBoolval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes blobVal = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pilosa.ColumnResponse.prototype.getBlobval = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes blobVal = 5;
 * This is a type-conversion wrapper around `getBlobval()`
 * @return {string}
 */
proto.pilosa.ColumnResponse.prototype.getBlobval_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlobval()));
};


/**
 * optional bytes blobVal = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlobval()`
 * @return {!Uint8Array}
 */
proto.pilosa.ColumnResponse.prototype.getBlobval_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlobval()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setBlobval = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearBlobval = function() {
  return jspb.Message.setOneofField(this, 5, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasBlobval = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Uint64Array uint64ArrayVal = 6;
 * @return {?proto.pilosa.Uint64Array}
 */
proto.pilosa.ColumnResponse.prototype.getUint64arrayval = function() {
  return /** @type{?proto.pilosa.Uint64Array} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.Uint64Array, 6));
};


/**
 * @param {?proto.pilosa.Uint64Array|undefined} value
 * @return {!proto.pilosa.ColumnResponse} returns this
*/
proto.pilosa.ColumnResponse.prototype.setUint64arrayval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearUint64arrayval = function() {
  return this.setUint64arrayval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasUint64arrayval = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StringArray stringArrayVal = 7;
 * @return {?proto.pilosa.StringArray}
 */
proto.pilosa.ColumnResponse.prototype.getStringarrayval = function() {
  return /** @type{?proto.pilosa.StringArray} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.StringArray, 7));
};


/**
 * @param {?proto.pilosa.StringArray|undefined} value
 * @return {!proto.pilosa.ColumnResponse} returns this
*/
proto.pilosa.ColumnResponse.prototype.setStringarrayval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearStringarrayval = function() {
  return this.setStringarrayval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasStringarrayval = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double float64Val = 8;
 * @return {number}
 */
proto.pilosa.ColumnResponse.prototype.getFloat64val = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setFloat64val = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearFloat64val = function() {
  return jspb.Message.setOneofField(this, 8, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasFloat64val = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Decimal decimalVal = 9;
 * @return {?proto.pilosa.Decimal}
 */
proto.pilosa.ColumnResponse.prototype.getDecimalval = function() {
  return /** @type{?proto.pilosa.Decimal} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.Decimal, 9));
};


/**
 * @param {?proto.pilosa.Decimal|undefined} value
 * @return {!proto.pilosa.ColumnResponse} returns this
*/
proto.pilosa.ColumnResponse.prototype.setDecimalval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearDecimalval = function() {
  return this.setDecimalval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasDecimalval = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string timestampVal = 10;
 * @return {string}
 */
proto.pilosa.ColumnResponse.prototype.getTimestampval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.setTimestampval = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.pilosa.ColumnResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pilosa.ColumnResponse} returns this
 */
proto.pilosa.ColumnResponse.prototype.clearTimestampval = function() {
  return jspb.Message.setOneofField(this, 10, proto.pilosa.ColumnResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.ColumnResponse.prototype.hasTimestampval = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.Decimal.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.Decimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.Decimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Decimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scale: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.Decimal}
 */
proto.pilosa.Decimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.Decimal;
  return proto.pilosa.Decimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.Decimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.Decimal}
 */
proto.pilosa.Decimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.Decimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.Decimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.Decimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Decimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getScale();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.pilosa.Decimal.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.Decimal} returns this
 */
proto.pilosa.Decimal.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 scale = 2;
 * @return {number}
 */
proto.pilosa.Decimal.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.Decimal} returns this
 */
proto.pilosa.Decimal.prototype.setScale = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.InspectRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.InspectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.InspectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.InspectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.InspectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columns: (f = msg.getColumns()) && proto.pilosa.IdsOrKeys.toObject(includeInstance, f),
    filterfieldsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    query: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.InspectRequest}
 */
proto.pilosa.InspectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.InspectRequest;
  return proto.pilosa.InspectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.InspectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.InspectRequest}
 */
proto.pilosa.InspectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.pilosa.IdsOrKeys;
      reader.readMessage(value,proto.pilosa.IdsOrKeys.deserializeBinaryFromReader);
      msg.setColumns(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFilterfields(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.InspectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.InspectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.InspectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.InspectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumns();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pilosa.IdsOrKeys.serializeBinaryToWriter
    );
  }
  f = message.getFilterfieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.pilosa.InspectRequest.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional IdsOrKeys columns = 2;
 * @return {?proto.pilosa.IdsOrKeys}
 */
proto.pilosa.InspectRequest.prototype.getColumns = function() {
  return /** @type{?proto.pilosa.IdsOrKeys} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.IdsOrKeys, 2));
};


/**
 * @param {?proto.pilosa.IdsOrKeys|undefined} value
 * @return {!proto.pilosa.InspectRequest} returns this
*/
proto.pilosa.InspectRequest.prototype.setColumns = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.clearColumns = function() {
  return this.setColumns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.InspectRequest.prototype.hasColumns = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string filterFields = 3;
 * @return {!Array<string>}
 */
proto.pilosa.InspectRequest.prototype.getFilterfieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.setFilterfieldsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.addFilterfields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.clearFilterfieldsList = function() {
  return this.setFilterfieldsList([]);
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.pilosa.InspectRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 offset = 5;
 * @return {number}
 */
proto.pilosa.InspectRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string query = 6;
 * @return {string}
 */
proto.pilosa.InspectRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.InspectRequest} returns this
 */
proto.pilosa.InspectRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.Uint64Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.Uint64Array.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.Uint64Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.Uint64Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Uint64Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.Uint64Array}
 */
proto.pilosa.Uint64Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.Uint64Array;
  return proto.pilosa.Uint64Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.Uint64Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.Uint64Array}
 */
proto.pilosa.Uint64Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setValsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.Uint64Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.Uint64Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.Uint64Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Uint64Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 vals = 1;
 * @return {!Array<number>}
 */
proto.pilosa.Uint64Array.prototype.getValsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pilosa.Uint64Array} returns this
 */
proto.pilosa.Uint64Array.prototype.setValsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pilosa.Uint64Array} returns this
 */
proto.pilosa.Uint64Array.prototype.addVals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.Uint64Array} returns this
 */
proto.pilosa.Uint64Array.prototype.clearValsList = function() {
  return this.setValsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.StringArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.StringArray.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.StringArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.StringArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.StringArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.StringArray}
 */
proto.pilosa.StringArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.StringArray;
  return proto.pilosa.StringArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.StringArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.StringArray}
 */
proto.pilosa.StringArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.StringArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.StringArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.StringArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.StringArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string vals = 1;
 * @return {!Array<string>}
 */
proto.pilosa.StringArray.prototype.getValsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pilosa.StringArray} returns this
 */
proto.pilosa.StringArray.prototype.setValsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pilosa.StringArray} returns this
 */
proto.pilosa.StringArray.prototype.addVals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.StringArray} returns this
 */
proto.pilosa.StringArray.prototype.clearValsList = function() {
  return this.setValsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pilosa.IdsOrKeys.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pilosa.IdsOrKeys.TypeCase = {
  TYPE_NOT_SET: 0,
  IDS: 1,
  KEYS: 2
};

/**
 * @return {proto.pilosa.IdsOrKeys.TypeCase}
 */
proto.pilosa.IdsOrKeys.prototype.getTypeCase = function() {
  return /** @type {proto.pilosa.IdsOrKeys.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pilosa.IdsOrKeys.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.IdsOrKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.IdsOrKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.IdsOrKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.IdsOrKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    ids: (f = msg.getIds()) && proto.pilosa.Uint64Array.toObject(includeInstance, f),
    keys: (f = msg.getKeys()) && proto.pilosa.StringArray.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.IdsOrKeys}
 */
proto.pilosa.IdsOrKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.IdsOrKeys;
  return proto.pilosa.IdsOrKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.IdsOrKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.IdsOrKeys}
 */
proto.pilosa.IdsOrKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.Uint64Array;
      reader.readMessage(value,proto.pilosa.Uint64Array.deserializeBinaryFromReader);
      msg.setIds(value);
      break;
    case 2:
      var value = new proto.pilosa.StringArray;
      reader.readMessage(value,proto.pilosa.StringArray.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.IdsOrKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.IdsOrKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.IdsOrKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.IdsOrKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pilosa.Uint64Array.serializeBinaryToWriter
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pilosa.StringArray.serializeBinaryToWriter
    );
  }
};


/**
 * optional Uint64Array ids = 1;
 * @return {?proto.pilosa.Uint64Array}
 */
proto.pilosa.IdsOrKeys.prototype.getIds = function() {
  return /** @type{?proto.pilosa.Uint64Array} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.Uint64Array, 1));
};


/**
 * @param {?proto.pilosa.Uint64Array|undefined} value
 * @return {!proto.pilosa.IdsOrKeys} returns this
*/
proto.pilosa.IdsOrKeys.prototype.setIds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pilosa.IdsOrKeys.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.IdsOrKeys} returns this
 */
proto.pilosa.IdsOrKeys.prototype.clearIds = function() {
  return this.setIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.IdsOrKeys.prototype.hasIds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringArray keys = 2;
 * @return {?proto.pilosa.StringArray}
 */
proto.pilosa.IdsOrKeys.prototype.getKeys = function() {
  return /** @type{?proto.pilosa.StringArray} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.StringArray, 2));
};


/**
 * @param {?proto.pilosa.StringArray|undefined} value
 * @return {!proto.pilosa.IdsOrKeys} returns this
*/
proto.pilosa.IdsOrKeys.prototype.setKeys = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pilosa.IdsOrKeys.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.IdsOrKeys} returns this
 */
proto.pilosa.IdsOrKeys.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.IdsOrKeys.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.Index}
 */
proto.pilosa.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.Index;
  return proto.pilosa.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.Index}
 */
proto.pilosa.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pilosa.Index.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.Index} returns this
 */
proto.pilosa.Index.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.CreateIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.CreateIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.CreateIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.CreateIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keys: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.CreateIndexRequest}
 */
proto.pilosa.CreateIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.CreateIndexRequest;
  return proto.pilosa.CreateIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.CreateIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.CreateIndexRequest}
 */
proto.pilosa.CreateIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.CreateIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.CreateIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.CreateIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.CreateIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pilosa.CreateIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.CreateIndexRequest} returns this
 */
proto.pilosa.CreateIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool keys = 2;
 * @return {boolean}
 */
proto.pilosa.CreateIndexRequest.prototype.getKeys = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pilosa.CreateIndexRequest} returns this
 */
proto.pilosa.CreateIndexRequest.prototype.setKeys = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.CreateIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.CreateIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.CreateIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.CreateIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.CreateIndexResponse}
 */
proto.pilosa.CreateIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.CreateIndexResponse;
  return proto.pilosa.CreateIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.CreateIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.CreateIndexResponse}
 */
proto.pilosa.CreateIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.CreateIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.CreateIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.CreateIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.CreateIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.GetIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.GetIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.GetIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.GetIndexRequest}
 */
proto.pilosa.GetIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.GetIndexRequest;
  return proto.pilosa.GetIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.GetIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.GetIndexRequest}
 */
proto.pilosa.GetIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.GetIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.GetIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.GetIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pilosa.GetIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.GetIndexRequest} returns this
 */
proto.pilosa.GetIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.GetIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.GetIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.GetIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: (f = msg.getIndex()) && proto.pilosa.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.GetIndexResponse}
 */
proto.pilosa.GetIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.GetIndexResponse;
  return proto.pilosa.GetIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.GetIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.GetIndexResponse}
 */
proto.pilosa.GetIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.Index;
      reader.readMessage(value,proto.pilosa.Index.deserializeBinaryFromReader);
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.GetIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.GetIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.GetIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pilosa.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional Index index = 1;
 * @return {?proto.pilosa.Index}
 */
proto.pilosa.GetIndexResponse.prototype.getIndex = function() {
  return /** @type{?proto.pilosa.Index} */ (
    jspb.Message.getWrapperField(this, proto.pilosa.Index, 1));
};


/**
 * @param {?proto.pilosa.Index|undefined} value
 * @return {!proto.pilosa.GetIndexResponse} returns this
*/
proto.pilosa.GetIndexResponse.prototype.setIndex = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pilosa.GetIndexResponse} returns this
 */
proto.pilosa.GetIndexResponse.prototype.clearIndex = function() {
  return this.setIndex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pilosa.GetIndexResponse.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.GetIndexesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.GetIndexesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.GetIndexesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.GetIndexesRequest}
 */
proto.pilosa.GetIndexesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.GetIndexesRequest;
  return proto.pilosa.GetIndexesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.GetIndexesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.GetIndexesRequest}
 */
proto.pilosa.GetIndexesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.GetIndexesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.GetIndexesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.GetIndexesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pilosa.GetIndexesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.GetIndexesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.GetIndexesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.GetIndexesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.pilosa.Index.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.GetIndexesResponse}
 */
proto.pilosa.GetIndexesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.GetIndexesResponse;
  return proto.pilosa.GetIndexesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.GetIndexesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.GetIndexesResponse}
 */
proto.pilosa.GetIndexesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pilosa.Index;
      reader.readMessage(value,proto.pilosa.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.GetIndexesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.GetIndexesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.GetIndexesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.GetIndexesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pilosa.Index.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Index indexes = 1;
 * @return {!Array<!proto.pilosa.Index>}
 */
proto.pilosa.GetIndexesResponse.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.pilosa.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pilosa.Index, 1));
};


/**
 * @param {!Array<!proto.pilosa.Index>} value
 * @return {!proto.pilosa.GetIndexesResponse} returns this
*/
proto.pilosa.GetIndexesResponse.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pilosa.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pilosa.Index}
 */
proto.pilosa.GetIndexesResponse.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pilosa.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pilosa.GetIndexesResponse} returns this
 */
proto.pilosa.GetIndexesResponse.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.DeleteIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.DeleteIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.DeleteIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.DeleteIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.DeleteIndexRequest}
 */
proto.pilosa.DeleteIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.DeleteIndexRequest;
  return proto.pilosa.DeleteIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.DeleteIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.DeleteIndexRequest}
 */
proto.pilosa.DeleteIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.DeleteIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.DeleteIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.DeleteIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.DeleteIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pilosa.DeleteIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pilosa.DeleteIndexRequest} returns this
 */
proto.pilosa.DeleteIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pilosa.DeleteIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pilosa.DeleteIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pilosa.DeleteIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.DeleteIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pilosa.DeleteIndexResponse}
 */
proto.pilosa.DeleteIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pilosa.DeleteIndexResponse;
  return proto.pilosa.DeleteIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pilosa.DeleteIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pilosa.DeleteIndexResponse}
 */
proto.pilosa.DeleteIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pilosa.DeleteIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pilosa.DeleteIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pilosa.DeleteIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pilosa.DeleteIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.pilosa);
/* eslint-enable */
