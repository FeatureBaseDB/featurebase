include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      - key: $CI_COMMIT_REF_SLUG
        paths:
          - .go/pkg/mod/

variables:
  GOVERSION: "1.16.10"

stages:
  - lint
  - test
  - build
  - integration
  - gauntlet

golangci-lint:
  image: golangci/golangci-lint:v1.39.0
  stage: lint
  extends: .go-cache
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - echo "Checking for issues in new code"
    - golangci-lint run -v 

build lattice:
  stage: test
  image: node:14
  variables:
    CI: "false"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - cd lattice
    - yarn install
    - yarn build
    - mv build ../
    - cd ../
    - rm -r lattice
    - mv build lattice
    - tar -czvf lattice.tar.gz lattice
  artifacts:
    paths:
      - lattice.tar.gz

run jest tests:
  stage: test
  image: node:14
  variables:
    CI: "true"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - echo "Testing lattice..."
    - cd lattice
    - npm install --force
    - npm test -- --coverage --testResultsProcessor=jest-sonar-reporter
  artifacts:
    paths:
      - lattice/coverage/lcov.info

run go tests:
  stage: test
  image: golang:$GOVERSION
  extends: .go-cache
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - echo "Running featurebase unit tests..."
    - PKG_LIST=$(go list ./... | grep -v internal/clustertests | paste -s -d, -)
    - go test -coverprofile=coverage.out -covermode=atomic -coverpkg=${PKG_LIST} ./...
  artifacts:
    paths:
      - coverage.out

run go tests future:
  stage: test
  image: golang:1.17.3
  extends: .go-cache
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - echo "Running featurebase unit tests..."
    - PKG_LIST=$(go list ./... | grep -v internal/clustertests | paste -s -d, -)
    - go test -json -coverprofile=coverage.out -covermode=atomic -coverpkg=${PKG_LIST} ./... | tee test-report.out
  artifacts:
    paths:
      - coverage.out
      - test-report.out

upload to sonarcloud:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.6
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - sonar-scanner -Dsonar.projectKey=molecula_featurebase -Dsonar.organization=molecula -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.go.tests.reportPaths=test-report.out  -Dsonar.javascript.lcov.reportPaths=lattice/coverage/lcov.info
  needs:
    - job: run go tests
    - job: run jest tests 
    
build for linux amd64:
  stage: build
  image: golang:$GOVERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="linux" GOARCH="amd64" make build FLAGS="-o featurebase_linux_amd64"
  artifacts:
    paths:
      - featurebase_linux_amd64

build for linux arm64:
  stage: build
  image: golang:$GOVERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="linux" GOARCH="arm64" make build FLAGS="-o featurebase_linux_arm64"
  artifacts:
    paths:
      - featurebase_linux_arm64

build for darwin amd64:
  stage: build
  image: golang:$GOVERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="darwin" GOARCH="amd64" make build FLAGS="-o featurebase_darwin_amd64"
  artifacts:
    paths:
      - featurebase_darwin_amd64

build for darwin arm64:
  stage: build
  image: golang:$GOVERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="darwin" GOARCH="arm64" make build FLAGS="-o featurebase_darwin_arm64"
  artifacts:
    paths:
      - featurebase_darwin_arm64

package for linux amd64:
  stage: build
  image: golang:$GOVERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  variables:
    GOOS: "linux"
    GOARCH: "amd64"
  script:
    - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list
    - apt update && apt install nfpm
    - make package
  artifacts:
    paths:
      - "*.deb"
      - "*.rpm"

build amd container fb:
  stage: build
  needs:
    - "build for linux amd64"
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  before_script:    
    - echo "${DOCKER_DEPLOY_TOKEN}" | docker login -u ${DOCKER_DEPLOY_USER} --password-stdin ${CI_REGISTRY}
  script:    
    - tag=${CI_REGISTRY_IMAGE}/server:${CI_COMMIT_REF_SLUG}
    - docker build --build-arg GO_VERSION=$GOVERSION --build-arg ARCH=amd64 -t $tag -f .gitlab/Dockerfile .
    - docker push $tag
    - echo Created docker featurebase image with tag "$tag"

build arm container fb:
  stage: build
  needs:
    - "build for linux arm64"
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  before_script:    
    - echo "${DOCKER_DEPLOY_TOKEN}" | docker login -u ${DOCKER_DEPLOY_USER} --password-stdin ${CI_REGISTRY}
  script:    
    - tag=${CI_REGISTRY_IMAGE}/server-arm:${CI_COMMIT_REF_SLUG}
    - docker build --build-arg GO_VERSION=$GOVERSION --build-arg ARCH=arm64 -t $tag -f .gitlab/Dockerfile .
    - docker push $tag
    - echo Created docker featurebase image with tag "$tag"


# clustertests doesn't run in docker, and requires several things to be set up on the runner to work:
# 1. Install Go, make sure it's on the path
# 2. Make sure "make" is installed
# 3. make sure docker/docker-compose is installed
# 4. make sure the git config is done `git config --global --add url."ssh://git@github.com/".insteadOf "https://github.com/"`
# 5. Add deploy key github.com/molecula/featurebase/settings/keys and add public key in .ssh folder of gitlab-runner user
clustertests:
  stage: integration
  tags:
    - shell
    - gcp # this is to restrict to the GCP runner we set up manually, once all our runners are set up properly we can remove this.
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
  script:
    - make clustertests

external lookup tests:
  stage: integration
  image: golang:$GOVERSION
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
  services:
    - postgres:13.5
  script:
    - apt-get update --allow-releaseinfo-change -y
    - apt-get install -y postgresql-client
    - go test . -run "^TestExternalLookup" -externalLookupDSN postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB?sslmode=disable


smoke test:
  stage: integration
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    PROFILE: "service-terraform"
    AWS_SSH_PRIVATE_KEY: $AWS_FBCI_SSH_KEY
    AWS_ACCESS_KEY_ID: $AWS_FBCI_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_FBCI_SECRET_ACCESS_KEY
    TF_VAR_cluster_prefix: ""
    TF_VAR_branch: ""
  tags:
    - aws
    - docker
    - fbsmoke
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  before_script:
    - apt-get update && apt-get install -y gnupg software-properties-common curl git
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
    - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    - apt-get update && apt-get install terraform
    - aws configure set aws_access_key_id $AWS_FBCI_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_FBCI_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - echo $AWS_FBCI_SSH_KEY > gitlab-featurebase-ci.pem
    - chmod 400 gitlab-featurebase-ci.pem
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo $AWS_FBCI_SSH_KEY > /root/.ssh/gitlab-featurebase-ci.pem
    - chmod 400 /root/.ssh/gitlab-featurebase-ci.pem
    - echo "$AWS_FBCI_SSH_KEY" | ssh-add -
    - chmod 700 /root/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - apt update && apt -y install jq wget
    - wget https://go.dev/dl/go1.17.5.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - TF_VAR_cluster_prefix="smoke-$(openssl rand -base64 12 | tr -d /=+ | cut -c -16)"
    - echo "Cluster Prefix --> $TF_VAR_cluster_prefix"
    - TF_VAR_branch=$CI_COMMIT_BRANCH
    - echo "Branch --> $TF_VAR_branch"
  script:
    - ./qa/scripts/setupSmokeTest.sh
    - ./qa/scripts/testSmokeTest.sh
  after_script:
    - ./qa/scripts/teardownSmokeTest.sh
  needs:
    - job: build for linux arm64
  allow_failure: true
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml


gauntlet:
  stage: gauntlet
  timeout: 4h
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    PROFILE: "service-terraform"
    AWS_SSH_PRIVATE_KEY: $AWS_FBCI_SSH_KEY
    AWS_ACCESS_KEY_ID: $AWS_FBCI_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_FBCI_SECRET_ACCESS_KEY
    TF_VAR_cluster_prefix: ""
    TF_VAR_branch: ""
  tags:
    - aws
    - docker
    - fbsmoke
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'
  before_script:
    - apt-get update && apt-get install -y gnupg software-properties-common curl git
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
    - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    - apt-get update && apt-get install terraform
    - aws configure set aws_access_key_id $AWS_FBCI_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_FBCI_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - echo $AWS_FBCI_SSH_KEY > gitlab-featurebase-ci.pem
    - chmod 400 gitlab-featurebase-ci.pem
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo $AWS_FBCI_SSH_KEY > /root/.ssh/gitlab-featurebase-ci.pem
    - chmod 400 /root/.ssh/gitlab-featurebase-ci.pem
    - echo "$AWS_FBCI_SSH_KEY" | ssh-add -
    - chmod 700 /root/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - apt update && apt -y install jq wget
    - wget https://go.dev/dl/go1.17.5.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - TF_VAR_cluster_prefix="gauntlet-$(openssl rand -base64 12 | tr -d /=+ | cut -c -16)"
    - echo "Cluster Prefix --> $TF_VAR_cluster_prefix"
    - TF_VAR_branch=$CI_COMMIT_BRANCH
    - echo "Branch --> $TF_VAR_branch"
  script:
    - ./qa/scripts/setupSamsungGauntlet.sh
    - ./qa/scripts/testSamsungGauntlet.sh
  after_script:
    - ./qa/scripts/teardownSamsungGauntlet.sh
  
