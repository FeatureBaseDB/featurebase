include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      - key: $CI_COMMIT_REF_SLUG
        paths:
          - .go/pkg/mod/

stages:
  - lint
  - test
  - build

    #before_script:
    #- echo "before_script"
    #- git version
    #- go env -w GOPRIVATE=github.com/molecula
    #- mkdir -p .go
    #- go version
    #- go env -w GO111MODULE=on

golangci-lint:
  image: golangci/golangci-lint:v1.39.0
  stage: lint
  extends: .go-cache
  allow_failure: false
  script:
    - echo "Checking for issues in new code"
    - golangci-lint run -v 

install lattice:
  stage: test
  image: node:14
  script:
    - echo "Installing lattice dependencies..."
    - cd lattice
    - yarn install

build lattice:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Building lattice..."
    - cd lattice
    - yarn build
    - tar -czvf lattice.tar.gz lattice/build
  artifacts:
    paths:
      - lattice/lattice.tar.gz
  needs:
    - job: install lattice
  allow_failure: true

run go tests:
  stage: test
  image: golang:1.16.9
  extends: .go-cache
  script:
    - echo "Running featurebase unit tests..."
    - go test -covermode=atomic -coverpkg=./... -coverprofile=coverage.out 
  artifacts:
    paths:
      - coverage.out

run go tests with output:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Running featurebase unit tests to capture JSON output..."
    - go test -json > test-report.out
  artifacts:
    paths:
      - test-report.out

generate coverage html:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Generating coverage HTML.."
    - go tool cover -html coverage.out -o coverage.html
  artifacts:
    paths:
      - coverage.html
  needs:
    - job: run go tests

upload to sonarcloud:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.6
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
  script:
    - sonar-scanner -Dsonar.projectKey=molecula_featurebase -Dsonar.organization=molecula -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.go.tests.reportPaths=test-report.out
  needs:
    - job: run go tests
    - job: run go tests with output
    
build for linux amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "linux"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_linux_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_amd64

build for linux arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "linux"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_linux_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_arm64

build for darwin amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "darwin"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_darwin_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_amd64

build for darwin arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "darwin"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_darwin_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_arm64
