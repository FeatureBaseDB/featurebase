include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  
stages:
  - test
  - build
  - integration

install lattice:
  stage: test
  image: node:14
  script:
    - echo "Installing lattice dependencies..."
    - cd lattice
    - yarn install

build lattice:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Building lattice..."
    - cd lattice
    - yarn build
    - tar -czvf lattice.tar.gz lattice/build
  artifacts:
    paths:
      - lattice/lattice.tar.gz
  needs:
    - job: install lattice
  allow_failure: true

run jest tests:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Testing lattice..."
    - cd lattice
    - npm install --force
    - npm test -- --coverage --testResultsProcessor=jest-sonar-reporter
  artifacts:
    paths:
      - lattice/coverage/lcov.info

run go tests:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Running featurebase unit tests..."
    - go test -covermode=atomic -coverprofile=coverage.out
  artifacts:
    paths:
      - coverage.out

run go tests with output:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Running featurebase unit tests to capture JSON output..."
    - go test -json > test-report.out
  artifacts:
    paths:
      - test-report.out

generate coverage html:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Generating coverage HTML.."
    - go tool cover -html coverage.out -o coverage.html
  artifacts:
    paths:
      - coverage.html
  needs:
    - job: run go tests

upload to sonarcloud:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.6
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
  script:
    - sonar-scanner -Dsonar.projectKey=molecula_featurebase -Dsonar.organization=molecula -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.go.tests.reportPaths=test-report.out  -Dsonar.javascript.lcov.reportPaths=lattice/coverage/lcov.info
  needs:
    - job: run go tests
    - job: run go tests with output
    - job: run jest tests 
    
build for linux amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  variables:
    GOOS: "linux"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_linux_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_amd64

build for linux arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  variables:
    GOOS: "linux"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_linux_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_arm64

build for darwin amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  variables:
    GOOS: "darwin"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_darwin_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_amd64

build for darwin arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  variables:
    GOOS: "darwin"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_darwin_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_arm64

deploy ec2 instance:
  stage: integration
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    AMI: ""
    INSTANCE: "t2_micro"
    SECURITY_GROUP: ""
    SUBNET_ID: ""
    SSH_KEY: ""
    PUBLIC_IP: ""
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    PROFILE: "default"
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - PROFILE=$(aws configure list-profiles)
  script:
    - AMI=$(aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs --query 'Parameters[0].[Value]' --output text --profile $PROFILE)

    - SECURITY_GROUP=$(aws ec2 describe-security-groups --filter Name=vpc-id,Values=vpc-03a4ba3d5b7c8f978 --query 'SecurityGroups[*].[GroupId]' --output text --profile $PROFILE)

    - SUBNET_ID=$(aws ec2 describe-subnets --filters 'Name=vpc-id,Values=vpc-03a4ba3d5b7c8f978' 'Name=availability-zone,Values=us-east-2a' --query 'Subnets[0].SubnetId' --output text --profile $PROFILE)

    - aws ec2 run-instances --image-id $AMI --count 1 --instance-type $INSTANCE --security-group-ids $SECURITY_GROUP --subnet-id $SUBNET_ID â€”user-data file://.gitlab/server.yml 

    - PUBLIC_IP=$(aws ec2 describe-instances --filters 'Name=tag:Name, Values=Single_Node_Deployment' 'Name=instance-state-name, Values=running' --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --profile $PROFILE)