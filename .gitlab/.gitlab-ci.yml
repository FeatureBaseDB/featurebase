include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      - key: $CI_COMMIT_REF_SLUG
        paths:
          - .go/pkg/mod/
variables:
  GOVERSION: "1.16.9"

stages:
  - lint
  - test
  - build
  - integration

    #before_script:
    #- echo "before_script"
    #- git version
    #- go env -w GOPRIVATE=github.com/molecula
    #- mkdir -p .go
    #- go version
    #- go env -w GO111MODULE=on

golangci-lint:
  image: golangci/golangci-lint:v1.39.0
  stage: lint
  extends: .go-cache
  allow_failure: false
  script:
    - echo "Checking for issues in new code"
    - golangci-lint run -v 

install lattice:
  stage: test
  image: node:14
  script:
    - echo "Installing lattice dependencies..."
    - cd lattice
    - yarn install

build lattice:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Building lattice..."
    - cd lattice
    - yarn build
    - tar -czvf lattice.tar.gz lattice/build
  artifacts:
    paths:
      - lattice/lattice.tar.gz
  needs:
    - job: install lattice
  allow_failure: true

run jest tests:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Testing lattice..."
    - cd lattice
    - npm install --force
    - npm test -- --coverage --testResultsProcessor=jest-sonar-reporter
  artifacts:
    paths:
      - lattice/coverage/lcov.info

run go tests:
  stage: test
  image: golang:1.16.9
  extends: .go-cache
  script:
    - echo "Running featurebase unit tests..."
    - ./cover-everything.sh 
  artifacts:
    paths:
      - coverage.out

run go tests with output:
  stage: test
  image: golang:1.16.9
  script:
    - echo "Running featurebase unit tests to capture JSON output..."
    - go test -json > test-report.out
  artifacts:
    paths:
      - test-report.out

upload to sonarcloud:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.6
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
  script:
    - sonar-scanner -Dsonar.projectKey=molecula_featurebase -Dsonar.organization=molecula -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.go.tests.reportPaths=test-report.out  -Dsonar.javascript.lcov.reportPaths=lattice/coverage/lcov.info
  needs:
    - job: run go tests
    - job: run go tests with output
    - job: run jest tests 
    
build for linux amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "linux"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_linux_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_amd64

build for linux arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "linux"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_linux_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_linux_arm64

build for darwin amd64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "darwin"
    GOARCH: "amd64"
  script:
    - go build -o featurebase_darwin_amd64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_amd64

build for darwin arm64:
  stage: build
  image: registry.gitlab.com/molecula/featurebase/builder:0.0.3
  extends: .go-cache
  variables:
    GOOS: "darwin"
    GOARCH: "arm64"
  script:
    - go build -o featurebase_darwin_arm64 ./cmd/featurebase
  artifacts:
    paths:
      - featurebase_darwin_arm64

# Build a FB Docker image with CI/CD and push to the GitLab registry.
build container fb:
  image: docker:stable
  stage: build
  needs:
    - "build for linux amd64"
  tags:
    - shell
  before_script:    
    - echo "${DOCKER_DEPLOY_TOKEN}" | docker login -u ${DOCKER_DEPLOY_USER} --password-stdin ${CI_REGISTRY}
  script:    
    - tag=${CI_REGISTRY_IMAGE}/server:${CI_COMMIT_REF_SLUG}
    - docker build --build-arg GO_VERSION=$GOVERSION -t $tag -f .gitlab/Dockerfile .
    - docker push $tag
    - echo Created docker featurebase image with tag "$tag"

deploy node for linux amd64:
  stage: integration
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    AMI: ""
    INSTANCE: "t2.micro"
    SECURITY_GROUP: ""
    SUBNET_ID: ""
    PUBLIC_IP: ""
    PROFILE: "default"
    AWS_SSH_PRIVATE_KEY: $AWS_SSH_PRIVATE_KEY
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - echo $AWS_SSH_PRIVATE_KEY > gitlab-featurebase-dev.pem
    - chmod 400 gitlab-featurebase-dev.pem
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval `ssh-agent -s`
    - mkdir -p ~/.ssh
    - echo "$AWS_SSH_PRIVATE_KEY" | ssh-add -
    - chmod 700 /root/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - AMI=$(aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs --query 'Parameters[0].[Value]' --output text --profile $PROFILE)
    - SECURITY_GROUP=$(aws ec2 describe-security-groups --filter Name=vpc-id,Values=vpc-03a4ba3d5b7c8f978 --query 'SecurityGroups[*].[GroupId]' --output text --profile $PROFILE)
    - SUBNET_ID=$(aws ec2 describe-subnets --filters 'Name=vpc-id,Values=vpc-03a4ba3d5b7c8f978' 'Name=availability-zone,Values=us-east-2a' --query 'Subnets[0].SubnetId' --output text --profile $PROFILE)
    - aws ec2 run-instances --image-id $AMI --instance-type $INSTANCE --security-group-ids $SECURITY_GROUP --subnet-id $SUBNET_ID --key-name gitlab-featurebase-dev --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=linux-amd64-node}]' --profile $PROFILE --user-data file://.gitlab/cloud-init.sh
    - sleep 120
    - PUBLIC_IP=$(aws ec2 describe-instances --filters 'Name=tag:Name, Values=linux-amd64-node' 'Name=instance-state-name, Values=running' --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --profile $PROFILE)
    - echo $PUBLIC_IP
    - INSTANCE_ID=$(aws ec2 describe-instances --filters 'Name=tag:Name, Values=linux-amd64-node' 'Name=instance-state-name, Values=running' --query 'Reservations[*].Instances[*].InstanceId' --output text --profile $PROFILE)
    - echo $INSTANCE_ID > linux-amd64-instance.txt
    - scp  -o StrictHostKeyChecking=no -i gitlab-featurebase-dev.pem featurebase_linux_amd64 ec2-user@$PUBLIC_IP:.
    - scp  -o StrictHostKeyChecking=no -i gitlab-featurebase-dev.pem .gitlab/featurebase.conf .gitlab/featurebase.service ec2-user@$PUBLIC_IP:.
    - aws ec2 associate-iam-instance-profile --instance-id $INSTANCE_ID --iam-instance-profile Name=featurebase-dev-ssm
  needs:
    - job: build for linux amd64
  artifacts:
    paths:
      - linux-amd64-instance.txt

run featurebase in linux amd64 node:
  stage: lint
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    INSTANCE_ID: ""
    PROFILE: "default"
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - INSTANCE_ID=$(cat linux-amd64-instance.txt)
  script:
    - sleep 240 # needed to allow enough time for the ssm to take into effect before the next command can get called
    - aws ssm send-command --document-name "AWS-RunShellScript" --instance-ids $INSTANCE_ID --cli-input-json file://.gitlab/configureFeatureBase.json --profile $PROFILE --region us-east-2
    - sleep 120
  needs:
    - job: deploy node for linux amd64

terminate node for linux amd64:
  stage: integration
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    INSTANCE_ID: ""
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - INSTANCE_ID=$(cat linux-amd64-instance.txt)
    - echo $INSTANCE_ID
  script:
    - aws ec2 terminate-instances --instance-ids $INSTANCE_ID
  needs:
    - job: deploy node for linux amd64
    - job: run featurebase in linux amd64 node
