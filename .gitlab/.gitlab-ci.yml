include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      - key: $CI_COMMIT_REF_SLUG
        paths:
          - .go/pkg/mod/
variables:
  GOVERSION: "1.16.9"

stages:
  - lint
  - test
  - build
  - integration

    #before_script:
    #- echo "before_script"
    #- git version
    #- go env -w GOPRIVATE=github.com/molecula
    #- mkdir -p .go
    #- go version
    #- go env -w GO111MODULE=on

golangci-lint:
  image: golangci/golangci-lint:v1.39.0
  stage: lint
  extends: .go-cache
  allow_failure: false
  script:
    - echo "Checking for issues in new code"
    - golangci-lint run -v 

build lattice:
  stage: test
  image: node:14
  variables:
    CI: "false"
  script:
    - cd lattice
    - yarn install
    - yarn build
    - mv build ../
    - cd ../
    - rm -r lattice
    - mv build lattice
    - tar -czvf lattice.tar.gz lattice
  artifacts:
    paths:
      - lattice.tar.gz

run jest tests:
  stage: test
  image: node:14
  variables:
    CI: "true"
  script:
    - echo "Testing lattice..."
    - cd lattice
    - npm install --force
    - npm test -- --coverage --testResultsProcessor=jest-sonar-reporter
  artifacts:
    paths:
      - lattice/coverage/lcov.info

run go tests:
  stage: test
  image: golang:1.16.10
  extends: .go-cache
  script:
    - echo "Running featurebase unit tests..."
    - ./cover-everything.sh 
  artifacts:
    paths:
      - coverage.out

run go tests future:
  stage: test
  image: golang:1.17.3
  extends: .go-cache
  script:
    - echo "Running featurebase unit tests..."
    - ./cover-everything.sh 
  artifacts:
    paths:
      - coverage.out


run go tests with output:
  stage: test
  image: golang:1.16.10
  script:
    - echo "Running featurebase unit tests to capture JSON output..."
    - go test -json > test-report.out
  artifacts:
    paths:
      - test-report.out

upload to sonarcloud:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.6
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
  script:
    - sonar-scanner -Dsonar.projectKey=molecula_featurebase -Dsonar.organization=molecula -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.go.tests.reportPaths=test-report.out  -Dsonar.javascript.lcov.reportPaths=lattice/coverage/lcov.info
  needs:
    - job: run go tests
    - job: run go tests with output
    - job: run jest tests 
    
build for linux amd64:
  stage: build
  image: golang:1.16.10
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="linux" GOARCH="amd64" make build FLAGS="-o featurebase_linux_amd64"
  artifacts:
    paths:
      - featurebase_linux_amd64

build for linux arm64:
  stage: build
  image: golang:1.16.10
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="linux" GOARCH="arm64" make build FLAGS="-o featurebase_linux_arm64"
  artifacts:
    paths:
      - featurebase_linux_arm64

build for darwin amd64:
  stage: build
  image: golang:1.16.10
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="darwin" GOARCH="amd64" make build FLAGS="-o featurebase_darwin_amd64"
  artifacts:
    paths:
      - featurebase_darwin_amd64

build for darwin arm64:
  stage: build
  image: golang:1.16.10
  script:
    - rm -r lattice
    - tar -xvf lattice.tar.gz 
    - go get -v -u github.com/rakyll/statik 
    - /go/bin/statik -src=lattice
    - GOOS="darwin" GOARCH="arm64" make build FLAGS="-o featurebase_darwin_arm64"
  artifacts:
    paths:
      - featurebase_darwin_arm64

package for linux amd64:
  stage: build
  image: golang:1.16.10
  variables:
    GOOS: "linux"
    GOARCH: "amd64"
  script:
    - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list
    - apt update && apt install nfpm
    - make package
  artifacts:
    paths:
      - "*.deb"
      - "*.rpm"

# Build a FB Docker image with CI/CD and push to the GitLab registry.
build container fb:
  image: docker:stable
  stage: build
  needs:
    - "build for linux amd64"
  tags:
    - shell
  before_script:    
    - echo "${DOCKER_DEPLOY_TOKEN}" | docker login -u ${DOCKER_DEPLOY_USER} --password-stdin ${CI_REGISTRY}
  script:    
    - tag=${CI_REGISTRY_IMAGE}/server:${CI_COMMIT_REF_SLUG}
    - docker build --build-arg GO_VERSION=$GOVERSION -t $tag -f .gitlab/Dockerfile .
    - docker push $tag
    - echo Created docker featurebase image with tag "$tag"

# deploy EC2 instance and save instance ID to a text file
deploy node for linux amd64:
  stage: lint
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variable:
    PROFILE: "default"
    AWS_SSH_PRIVATE_KEY: $AWS_SSH_PRIVATE_KEY
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region "us-east-2"
    - aws configure set aws_profile $PROFILE
    - echo $AWS_SSH_PRIVATE_KEY > gitlab-featurebase-dev.pem
    - echo $AWS_SSH_PRIVATE_KEY > gitlab-featurebase-dev.pem
    - chmod 400 gitlab-featurebase-dev.pem
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval `ssh-agent -s`
    - mkdir -p ~/.ssh 
    - echo "$AWS_SSH_PRIVATE_KEY" | ssh-add -
    - chmod 700 /root/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - apt update && apt -y install jq
  script:
    - ./qa/scripts/deployNode.sh $PROFILE
